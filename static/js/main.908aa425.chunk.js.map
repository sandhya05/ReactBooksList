{"version":3,"sources":["images sync /^/.//.*$","images/book4.png","images/books1.jpg","images/books2.jpg","images/books3.jpg","logout.js","home.js","books.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Logout","Component","Home","books","props","updateSearch","event","setState","search","target","value","state","bind","axios","get","then","res","booksList","data","console","log","catch","error","this","filteredBooks","filter","book","name","toLowerCase","indexOf","style","margin","type","onChange","className","index","price","rating","status","src","require","image","alt","width","height","Example","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.908aa425.chunk.js","sourcesContent":["var map = {\n\t\"./book4.png\": 66,\n\t\"./books1.jpg\": 67,\n\t\"./books2.jpg\": 68,\n\t\"./books3.jpg\": 69\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 65;","module.exports = __webpack_public_path__ + \"static/media/book4.b60d6771.png\";","module.exports = __webpack_public_path__ + \"static/media/books1.9bab33ef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/books2.e2b6dd4f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/books3.74710441.jpg\";","import React, { Component } from 'react'\n\nexport default class Logout extends Component {\n    render() {\n        return (\n            <div>\n                Thanks for purchasing!!\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div>\n                Welcome !!\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios';\n\n\nexport default class books extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            books:[\n                // {\"name\":\"Javascript\",\"model\":\"nit-01\",\"price\":200,\"rating\":2,\"image\":\"books1.jpg\",\"status\":\"Available\",\"Id\":1},\n                // {\"name\":\"Angular\",\"model\":\"nit-02\",\"price\":100,\"rating\":4,\"image\":\"books2.jpg\",\"status\":\"Available\",\"Id\":2},\n                // {\"name\":\"React\",\"model\":\"nit-03\",\"price\":150,\"rating\":5,\"image\":\"books3.jpg\",\"status\":\"Available\",\"Id\":3},\n                // {\"name\":\"Vue\",\"model\":\"nit-04\",\"price\":350,\"rating\":3,\"image\":\"book4.png\",\"status\":\"Not Available\",\"Id\":4},  \n              ],\n            search:''\n        }\n        this.updateSearch=this.updateSearch.bind(this);\n    }\n    \n    componentDidMount(){\n        axios.get('http://demo2246246.mockable.io/books')\n        .then(res => {\n        const booksList = res.data;\n        console.log(\"Response is \",booksList);\n        this.setState({books:booksList})\n        })\n        .catch(function(error) {\n          console.log(('Request failed', error));\n        });\n    }\n\n\n    updateSearch=(event)=>{\n        this.setState({search:event.target.value});\n    }\n    render() {\n        const {books}=this.state;\n        console.log(\"From state\",this.state.books.books);\n        console.log(\"Books here\",books)\n\n        let filteredBooks=null;\n        if(books.books){\n             filteredBooks = this.state.books.books.filter(\n                (book)=>{\n                    return book.name.toLowerCase().indexOf(this.state.search.toLowerCase())!==-1;\n                }\n              );\n        }\n    \n        return (\n            <div>\n                <div style={{margin:\"30px 30px 30px 30px\"}}>       \n                    Search your favourite book : <input type=\"text\" value={this.state.search} onChange={this.updateSearch.bind(this)}/>\n                </div><br></br>\n\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Price</th>\n                            <th>Rating</th>\n                            <th>Status</th>\n                            <th>Image</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    \n                        {filteredBooks &&\n                            filteredBooks.map((book, index) => {\n                                return (\n                                    <>\n                                    <tr>\n                                        <td>{book.name}</td>\n                                        <td>{book.price}</td>\n                                        <td>{book.rating}</td>\n                                        <td>{book.status}</td>\n                                        \n                                        <td><img src={require(`./images/${book.image}`)} alt=\"tile\" width=\"100px\" height=\"100px\"></img></td>\n                                    </tr>   \n                                    </>\n                                );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n","import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\nimport Logout from './logout';\nimport Home from './home';\nimport Books from './books';\n\n\nconst Example = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n      <Router>\n          <div>\n            <Navbar color=\"light\" light expand=\"md\">\n                <NavbarBrand href=\"/\">BooksList</NavbarBrand>\n                <NavbarToggler onClick={toggle} />\n                <Collapse isOpen={isOpen} navbar>\n                <Nav className=\"mr-auto\" navbar>\n                    <NavItem>\n                    <NavLink href=\"/home/\">Home</NavLink>\n                    </NavItem>\n                    <NavItem>\n                    <NavLink href=\"/books/\">Books</NavLink>\n                    </NavItem>\n                    <NavItem>\n                    <NavLink href=\"/logout/\">Logout</NavLink>\n                    </NavItem>\n                </Nav>\n                </Collapse>\n            </Navbar>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Home/>\n                </Route>\n                <Route path=\"/home\">\n                    <Home />\n                </Route>\n                <Route path=\"/books\">\n                    {/* <TileList /> */}\n                    <Books />\n                </Route>\n                <Route path=\"/logout\">\n                    <Logout />\n                </Route>\n            </Switch>\n        </div>\n\n      </Router>\n    \n  );\n\n}\n\nexport default Example;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Login from './login';\nimport Logout from './logout';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n// ReactDOM.render(<Login/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}